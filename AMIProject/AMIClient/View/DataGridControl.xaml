<UserControl x:Class="AMIClient.View.DataGridControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AMIClient.View"
             xmlns:vml="clr-namespace:AMIClient.VML"
             vml:ViewModelLocator.AutoHookedUpViewModel="True"
             mc:Ignorable="d" 
             xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             d:DesignHeight="300" d:DesignWidth="700"
             >

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Accents/steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/basedark.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style BasedOn="{StaticResource MetroDataGridRow}" TargetType="DataGridRow">
                <Style.Triggers>
                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                        <Setter Property="Background" Value="Red" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                            <Condition Property="IsMouseOver" Value="true" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                            <Condition Property="IsSelected" Value="true" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{DynamicResource BaseBrush}" HorizontalAlignment="Center" Height="10" Stroke="{DynamicResource BaseBorderBrush}" VerticalAlignment="Center" Width="10"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource AccentColorBrush}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <StackPanel Grid.Column="1" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Center" Background="{DynamicResource BaseBrush}">
                                        <ContentPresenter Name="content" RecognizesAccessKey="True" SnapsToDevicePixels="True"  Margin="10,0,5,0"/>
                                    </StackPanel>

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="content" Value="{DynamicResource SelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DarkerSelectedBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource DisabledBorderBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DisabledBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Ellipse x:Name="circle" Fill="{DynamicResource BaseBrush}" HorizontalAlignment="Center" Height="10" Stroke="{DynamicResource AccentColorBrush}" VerticalAlignment="Center" Width="10"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource AccentColorBrush}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Center" Background="{DynamicResource BaseBrush}">
                                        <ContentPresenter Name="content"  RecognizesAccessKey="True" SnapsToDevicePixels="True" Margin="10,0,5,0" />
                                    </StackPanel>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="content" Value="{DynamicResource SelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DarkerSelectedBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource DisabledBorderBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DisabledBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}"/>
                <Setter Property="BorderThickness" Value="{DynamicResource DefaultBorderThickness}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <Grid>
                                    <Border Margin="2,10,2,2" Name="bdrect" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource DefaultCornerRadius}" />
                                    <DockPanel Margin="0,0,0,3" Name="dp">
                                        <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="10,1,3,1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="8,2,8,2" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </DockPanel>

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Margin" TargetName="bdrect" Value="2,2,2,12" />
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                    <Setter Property="Margin" TargetName="dp" Value="0,3,0,0" />

                                </Trigger>


                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="MyColumnHeader" 
               BasedOn="{StaticResource MetroDataGridColumnHeader}" 
               TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>


    <Grid Margin="0,0,0,0" VerticalAlignment="Stretch" Height="auto">
        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
            <DataGrid ColumnHeaderStyle="{StaticResource MyColumnHeader}" CanUserResizeColumns="True" SelectionMode="Single" GridLinesVisibility="None" ItemsSource="{Binding Model.ViewTableItems, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" CanUserAddRows="false" AutoGenerateColumns="False" HeadersVisibility="Column" CanUserResizeRows="False" >


                <DataGrid.Resources>
                    <ContextMenu x:Key="ticketContextMenu">
                        <ContextMenu.Items>
                            <MenuItem
                            Header="Show AMIs"
                            Command="{Binding DataContext.ShowAmisCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"
                            CommandParameter="{Binding DataContext.Io, RelativeSource={RelativeSource Mode=Self}}"/>
                            <MenuItem
                            Header="Minute chart"
                            Command="{Binding DataContext.IndividualAmiChartCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"
                            CommandParameter="{Binding DataContext.Io, RelativeSource={RelativeSource Mode=Self}}"/>
                            <MenuItem
                            Header="Hour chart"
                            Command="{Binding DataContext.IndividualAmiHourChartCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"
                            CommandParameter="{Binding DataContext.Io, RelativeSource={RelativeSource Mode=Self}}"/>
                            <MenuItem
                            Header="Day chart"
                            Command="{Binding DataContext.IndividualAmiDayChartCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"
                            CommandParameter="{Binding DataContext.Io, RelativeSource={RelativeSource Mode=Self}}"/>
                            <MenuItem
                            Header="Consumption statistic"
                            Command="{Binding DataContext.ConsumptionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"
                            CommandParameter="{Binding DataContext.Io, RelativeSource={RelativeSource Mode=Self}}"/>
                        </ContextMenu.Items>
                    </ContextMenu>
                </DataGrid.Resources>

                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Setter Property="ContextMenu" Value="{StaticResource ticketContextMenu}" />
                        <Setter Property="Focusable" Value="{Binding ContextMenuEnabled}" />
                    </Style>
                </DataGrid.RowStyle>

                <DataGrid.Columns>

                    <DataGridTemplateColumn Header="Status" MinWidth="70" MaxWidth="70" Width="70">

                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Ellipse Width="10" Height="10" Fill="{Binding Status}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>

                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="Area" CanUserSort="True" 
        SortMemberPath="Type" MinWidth="100" Width="auto">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Type}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <!--NAME COLUMN-->
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <Grid IsHitTestVisible="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="70" Width="auto"/>
                                        <ColumnDefinition MinWidth="30" Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="{TemplateBinding Content}"/>
                                    <!--FILTER EXPANDER-->
                                    <Expander Grid.Column="1" IsHitTestVisible="True" 
                VerticalAlignment="Top" ToolTip="Filter">
                                        <Border IsHitTestVisible="True" BorderThickness="1" 
                  Margin="-80 0 0 0" >
                                            <StackPanel Margin="0 4 0 0">
                                                <TextBox Width="auto"
                                                
                        Text="{Binding DataContext.TypeFilter, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                        RelativeSource={RelativeSource AncestorType=UserControl}}" 
                        
                        ToolTip="Enter filter term" Height="18" FontSize="9" 
                        BorderThickness="1" />
                                            </StackPanel>
                                        </Border>
                                    </Expander>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>

                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Header="Name" CanUserSort="True" 
        SortMemberPath="Io.Name" MinWidth="100" Width="auto">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Io.Name}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <!--NAME COLUMN-->
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <Grid IsHitTestVisible="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="70" Width="auto"/>
                                        <ColumnDefinition MinWidth="30" Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="{TemplateBinding Content}"/>
                                    <!--FILTER EXPANDER-->
                                    <Expander Grid.Column="1" IsHitTestVisible="True" 
                VerticalAlignment="Top" ToolTip="Filter">
                                        <Border IsHitTestVisible="True" BorderThickness="1" 
                  Margin="-80 0 0 0" >
                                            <StackPanel Margin="0 4 0 0">
                                                <TextBox Width="auto"
                                                
                        Text="{Binding DataContext.NameFilter, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,
                        RelativeSource={RelativeSource AncestorType=UserControl}}" 
                        
                        ToolTip="Enter filter term" Height="18" FontSize="9" 
                        BorderThickness="1" />
                                            </StackPanel>
                                        </Border>
                                    </Expander>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>

                    </DataGridTemplateColumn>

                    <DataGridTextColumn MinWidth="100" Width="auto" Header="P [kW]" Binding="{Binding CurrentP, StringFormat=F2}"/>
                    <DataGridTextColumn MinWidth="100" Width="auto" Header="Q [kVAr]" Binding="{Binding CurrentQ, StringFormat=F2}"/>
                    <DataGridTextColumn MinWidth="100" Width="*" Header="V [p.u.]" Binding="{Binding CurrentV, StringFormat=F2}"/>

                </DataGrid.Columns>
            </DataGrid>
        </ScrollViewer>
    </Grid>

</UserControl>
