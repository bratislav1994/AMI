<UserControl x:Class="AMIClient.View.NetworkPreviewControl"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AMIClient"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls" 
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local2="clr-namespace:AMIClient.View"
        xmlns:local3="clr-namespace:AMIClient.ViewModels"
        xmlns:vml="clr-namespace:AMIClient.VML"
        xmlns:vm="clr-namespace:AvalonDockMVVM.ViewModel"
        xmlns:dock="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:dockctrl="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
        mc:Ignorable="d"
             xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:cb="http://schemas.ncore.com/wpf/xaml/colorbox"
    xmlns:mm="http://metro.mahapps.com/winfx/xaml/controls"
		xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:xtk="http://schemas.xceed.com/wpf/xaml/toolkit"
             d:DesignHeight="300" d:DesignWidth="700"

             >

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,
             /MahApps.Metro;component/Styles/Accents/steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/basedark.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />-->
            </ResourceDictionary.MergedDictionaries>

            <!--<Style x:Key="CustomTreeViewStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource MetroTreeViewItem}">
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
            </Style>-->

            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" VerticalAlignment="Center" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{DynamicResource BaseBrush}" HorizontalAlignment="Center" Height="19" Stroke="Black" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="Black" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Name="content" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="content" Value="{DynamicResource SelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DarkerSelectedBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource DisabledBorderBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DisabledBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False" VerticalAlignment="Center">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{DynamicResource BaseBrush}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource BaseBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource AccentColorBrush}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Name="content" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="content" Value="{DynamicResource SelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource SelectedBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DarkerSelectedBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource DisabledBorderBrush}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource DisabledBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}"/>
                <Setter Property="BorderThickness" Value="{DynamicResource DefaultBorderThickness}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <Grid>
                                    <Border Margin="2,10,2,2" Name="bdrect" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource DefaultCornerRadius}" />
                                    <DockPanel Margin="0,0,0,3" Name="dp">
                                        <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="10,1,3,1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="8,2,8,2" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </DockPanel>

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                    <Setter Property="Margin" TargetName="bdrect" Value="2,10,0,2" />
                                    <Setter Property="Margin" TargetName="dp" Value="0,9,3,0" />
                                </Trigger>

                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                    <Setter Property="Margin" TargetName="dp" Value="3,9,0,0" />
                                    <Setter Property="Margin" TargetName="HeaderSite" Value="0,1,9,1" />
                                    <Setter Property="Margin" TargetName="bdrect" Value="0,10,2,2" />


                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <DataTemplate DataType="{x:Type local3:ChartViewModel}">
                <local2:ChartControl />
            </DataTemplate>

            <DataTemplate DataType="{x:Type local3:DataGridViewModel}">
                <local2:DataGridControl />
            </DataTemplate>

            <DataTemplate DataType="{x:Type local3:AmiDataGridViewModel}">
                <local2:AmiDataGridControl />
            </DataTemplate>

            <DataTemplate DataType="{x:Type local3:ConsumptionStatisticViewModel}">
                <local2:ConsumptionStatisticControl />
            </DataTemplate>

            <Style x:Key="MetroTreeView"
           TargetType="{x:Type TreeView}">
                <Setter Property="BorderBrush"
                Value="{DynamicResource BlackBrush}" />
                <Setter Property="Background"
                Value="{DynamicResource WhiteBrush}" />
                <!-- default to 0 -->
                <Setter Property="BorderThickness"
                Value="0" />
                <Setter Property="SnapsToDevicePixels"
                Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeView}">
                            <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer>
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter TargetName="Border"
                                    Property="BorderBrush">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource Gray9}" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemContainerStyle"
                Value="{StaticResource MetroTreeViewItem}" />
            </Style>

        </ResourceDictionary>

    </UserControl.Resources>

    <Grid Margin="0,0,0,0" VerticalAlignment="Stretch" Height="auto">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <Rectangle HorizontalAlignment="Left" Width="32" Fill="{DynamicResource AccentColorBrush}">

        </Rectangle>

        <Expander ExpandDirection="Right" Grid.Column="0"
				  HorizontalAlignment="Right" VerticalAlignment="Stretch">


            <Expander.Content>
                <TreeView BorderBrush="White" Width="200" Grid.Column="0" ItemsSource="{Binding RootElements}" x:Name="tree">

                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                        </Style>
                    </TreeView.ItemContainerStyle>

                    <TreeView.Resources>

                        <HierarchicalDataTemplate 
                                DataType="{x:Type local:RootElement}" 
                                ItemsSource="{Binding Children}">

                            <StackPanel Orientation="Horizontal" >
                                <TextBlock x:Name="t1" Text="{Binding Name}">

                                </TextBlock>
                            </StackPanel>
                        </HierarchicalDataTemplate>

                        <HierarchicalDataTemplate 
                                DataType="{x:Type local:GeoRegionForTree}" 
                                ItemsSource="{Binding Children}">

                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Name}" Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">

                                </TextBlock>
                            </StackPanel>
                        </HierarchicalDataTemplate>

                        <DataTemplate 
                                DataType="{x:Type local:SubGeoRegionForTree}" 
                                >
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Name}" Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">

                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>

                    </TreeView.Resources>
                </TreeView>
            </Expander.Content>
        </Expander>

        <Grid Grid.Column="1" Grid.ColumnSpan="2">

            <dock:DockingManager Grid.Row="1"
                         DataContext="{Binding DockManagerViewModel}"
                         DocumentsSource="{Binding Documents}"
                         AnchorablesSource="{Binding Anchorables}" 
                         AllowMixedOrientation="True">

                <dock:DockingManager.Resources>

                    <!-- add views for specific ViewModels -->
                    <DataTemplate DataType="{x:Type local3:ChartViewModel}">
                        <local2:ChartControl />
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type local3:DataGridViewModel}">
                        <local2:DataGridControl />
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type local3:AmiDataGridViewModel}">
                        <local2:AmiDataGridControl />
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type local3:ConsumptionStatisticViewModel}">
                        <local2:ConsumptionStatisticControl />
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type local3:ActiveAlarmsViewModel}">
                        <local2:ActiveAlarmsControl />
                    </DataTemplate>

                    <DataTemplate DataType="{x:Type local3:ResolvedAlarmsViewModel}">
                        <local2:ResolvedAlarmsControl />
                    </DataTemplate>

                    <!--<DataTemplate>
                        <ContentControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="auto" Width="auto" Content="{Binding Path=CurrentTab}"></ContentControl>
                    </DataTemplate>-->

                </dock:DockingManager.Resources>

                <dock:DockingManager.LayoutItemContainerStyle>
                    <!-- you can add additional bindings from the layoutitem to the DockWindowViewModel -->
                    <Style TargetType="{x:Type dockctrl:LayoutItem}" >
                        <Setter Property="Title" Value="{Binding Model.Title}" />
                        <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
                        <Setter Property="CanClose" Value="{Binding Model.CanClose}" />
                    </Style>
                </dock:DockingManager.LayoutItemContainerStyle>

            </dock:DockingManager>
        </Grid>
    </Grid>
</UserControl>
