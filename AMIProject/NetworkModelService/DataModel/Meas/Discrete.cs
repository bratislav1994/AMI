///////////////////////////////////////////////////////////
//  Discrete.cs
//  Implementation of the Class Discrete
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:09 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Meas;
using FTN.Common;

namespace TC57CIM.IEC61970.Meas {
	/// <summary>
	/// Discrete represents a discrete Measurement, i.e. a Measurement reprsenting
	/// discrete values, e.g. a Breaker position.
	/// </summary>
	public class Discrete : Measurement {

		/// <summary>
		/// Normal value range maximum for any of the MeasurementValue.values. Used for
		/// scaling, e.g. in bar graphs or of telemetered raw values.
		/// </summary>
		public int maxValue;
		/// <summary>
		/// Normal value range minimum for any of the MeasurementValue.values. Used for
		/// scaling, e.g. in bar graphs or of telemetered raw values.
		/// </summary>
		public int minValue;
		/// <summary>
		/// Normal measurement value, e.g., used for percentage calculations.
		/// </summary>
		public int normalValue;

        public Discrete()
        {

        }

		public Discrete(long globalId)
        :base(globalId)
        {
        }

        public int MaxValue
        {
            get { return maxValue; }

            set { maxValue = value; }
        }

        public int MinValue
        {
            get { return minValue; }

            set { minValue = value; }
        }

        public int NormalValue
        {
            get { return normalValue; }

            set { normalValue = value; }
        }
        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                Discrete x = (Discrete)obj;
                return (x.maxValue == this.maxValue && x.minValue == this.minValue && x.normalValue == this.normalValue);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.DISCRETE_MAXVALUE:
                case ModelCode.DISCRETE_MINVALUE:
                case ModelCode.DISCRETE_NORMALVALUE:
                    return true;

                default:
                    return base.HasProperty(t);

            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.DISCRETE_MAXVALUE:
                    property.SetValue(maxValue);
                    break;
                case ModelCode.DISCRETE_MINVALUE:
                    property.SetValue(minValue);
                    break;
                case ModelCode.DISCRETE_NORMALVALUE:
                    property.SetValue(normalValue);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.DISCRETE_MAXVALUE:

                    maxValue = property.AsInt();
                    break;
                case ModelCode.DISCRETE_MINVALUE:
                    minValue = property.AsInt();
                    break;
                case ModelCode.DISCRETE_NORMALVALUE:
                    normalValue = property.AsInt();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

        public Discrete DeepCopy()
        {
            Discrete discreteCopy = new Discrete();

            discreteCopy.GlobalId = this.GlobalId;
            discreteCopy.Mrid = this.Mrid;
            discreteCopy.Name = this.Name;
            discreteCopy.MinValue = this.MinValue;
            discreteCopy.MaxValue = this.MaxValue;
            discreteCopy.NormalValue = this.NormalValue;
            discreteCopy.UnitSymbol = this.UnitSymbol;
            discreteCopy.SignalDirection = this.SignalDirection;
            discreteCopy.PowerSystemResourceRef = this.PowerSystemResourceRef;

            return discreteCopy;
        }

    }//end Discrete

}//end namespace Meas