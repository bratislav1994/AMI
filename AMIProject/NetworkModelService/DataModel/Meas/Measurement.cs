///////////////////////////////////////////////////////////
//  Measurement.cs
//  Implementation of the Class Measurement
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:16:58 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FTN.Common;
using TC57CIM.IEC61970.Core;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TC57CIM.IEC61970.Meas
{
    /// <summary>
    /// A Measurement represents any measured, calculated or non-measured non-
    /// calculated quantity. Any piece of equipment may contain Measurements, e.g. a
    /// substation may have temperature measurements and door open indications, a
    /// transformer may have oil temperature and tank pressure measurements, a bay may
    /// contain a number of power flow measurements and a Breaker may contain a switch
    /// status measurement.
    /// The PSR - Measurement association is intended to capture this use of
    /// Measurement and is included in the naming hierarchy based on EquipmentContainer.
    /// The naming hierarchy typically has Measurements as leafs, e.g. Substation-
    /// VoltageLevel-Bay-Switch-Measurement.
    /// Some Measurements represent quantities related to a particular sensor location
    /// in the network, e.g. a voltage transformer (PT) at a busbar or a current
    /// transformer (CT) at the bar between a breaker and an isolator. The sensing
    /// position is not captured in the PSR - Measurement association. Instead it is
    /// captured by the Measurement - Terminal association that is used to define the
    /// sensing location in the network topology. The location is defined by the
    /// connection of the Terminal to ConductingEquipment.
    /// If both a Terminal and PSR are associated, and the PSR is of type
    /// ConductingEquipment, the associated Terminal should belong to that
    /// ConductingEquipment instance.
    /// When the sensor location is needed both Measurement-PSR and Measurement-
    /// Terminal are used. The Measurement-Terminal association is never used alone.
    /// </summary>

    [Serializable]
    [DataContract]
    [KnownType(typeof(Analog))]
    [KnownType(typeof(Discrete))]
    public class Measurement : IdentifiedObject
    {

        /// <summary>
        /// The unit of measure of the measured quantity.
        /// </summary>
        private UnitSymbol unitSymbol;
        private Direction signalDirection;
        private int minRawValue;
        private int maxRawValue;
        private int normalRawValue;
        private long powerSystemResource = 0;
        private int rtuAddress = 0;
        private int idDB;

        public Measurement()
        {
        }

        public Measurement(long globalId)
            : base(globalId)
        {
        }

        [IgnoreDataMember]
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int IdDB
        {
            get { return idDB; }
            set { idDB = value; }
        }

        [DataMember]
        public UnitSymbol UnitSymbol
        {
            get { return unitSymbol; }
            set { unitSymbol = value; }
        }

        [DataMember]
        public Direction SignalDirection
        {
            get { return signalDirection; }
            set { signalDirection = value; }
        }

        [DataMember]
        public long PowerSystemResourceRef
        {
            get { return powerSystemResource; }
            set { powerSystemResource = value; }
        }

        [DataMember]
        public int RtuAddress
        {
            get
            {
                return rtuAddress;
            }

            set
            {
                rtuAddress = value;
            }
        }

        [DataMember]
        public int MinRawValue
        {
            get
            {
                return minRawValue;
            }

            set
            {
                minRawValue = value;
            }
        }

        [DataMember]
        public int MaxRawValue
        {
            get
            {
                return maxRawValue;
            }

            set
            {
                maxRawValue = value;
            }
        }

        [DataMember]
        public int NormalRawValue
        {
            get
            {
                return normalRawValue;
            }

            set
            {
                normalRawValue = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                Measurement x = (Measurement)obj;
                return (x.unitSymbol == this.unitSymbol && x.signalDirection == this.signalDirection &&
                    x.powerSystemResource == this.powerSystemResource && x.rtuAddress == this.rtuAddress &&
                    x.minRawValue == this.minRawValue && x.maxRawValue == this.maxRawValue && x.normalRawValue == this.normalRawValue);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode property)
        {
            switch (property)
            {
                case ModelCode.MEASUREMENT_UNITSYMBOL:
                case ModelCode.MEASUREMENT_DIRECTION:
                case ModelCode.MEASUREMENT_RTUADDRESS:
                case ModelCode.MEASUREMENT_PSR:
                case ModelCode.MEASUREMENT_MINRAWVAL:
                case ModelCode.MEASUREMENT_MAXRAWVAL:
                case ModelCode.MEASUREMENT_NORMALRAWVAL:
                    return true;
                default:
                    return base.HasProperty(property);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.MEASUREMENT_UNITSYMBOL:
                    property.SetValue((int)unitSymbol);
                    break;
                case ModelCode.MEASUREMENT_DIRECTION:
                    property.SetValue((int)signalDirection);
                    break;
                case ModelCode.MEASUREMENT_RTUADDRESS:
                    property.SetValue((int)rtuAddress);
                    break;
                case ModelCode.MEASUREMENT_PSR:
                    property.SetValue(powerSystemResource);
                    break;
                case ModelCode.MEASUREMENT_MINRAWVAL:
                    property.SetValue(minRawValue);
                    break;
                case ModelCode.MEASUREMENT_MAXRAWVAL:
                    property.SetValue(maxRawValue);
                    break;
                case ModelCode.MEASUREMENT_NORMALRAWVAL:
                    property.SetValue(normalRawValue);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.MEASUREMENT_UNITSYMBOL:
                    unitSymbol = (UnitSymbol)property.AsInt();
                    break;
                case ModelCode.MEASUREMENT_DIRECTION:
                    signalDirection = (Direction)property.AsInt();
                    break;
                case ModelCode.MEASUREMENT_RTUADDRESS:
                    rtuAddress = property.AsInt();
                    break;
                case ModelCode.MEASUREMENT_PSR:
                    powerSystemResource = property.AsReference();
                    break;
                case ModelCode.MEASUREMENT_MAXRAWVAL:
                    maxRawValue = property.AsInt();
                    break;
                case ModelCode.MEASUREMENT_MINRAWVAL:
                    minRawValue = property.AsInt();
                    break;
                case ModelCode.MEASUREMENT_NORMALRAWVAL:
                    normalRawValue = property.AsInt();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation	

        #region IReference implementation

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (powerSystemResource != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
            {
                references[ModelCode.MEASUREMENT_PSR] = new List<long>();
                references[ModelCode.MEASUREMENT_PSR].Add(powerSystemResource);
            }

            base.GetReferences(references, refType);
        }

        #endregion IReference implementation		

    }//end Measurement

}//end namespace Meas