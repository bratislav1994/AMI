///////////////////////////////////////////////////////////
//  Analog.cs
//  Implementation of the Class Analog
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:00 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Meas;
using FTN.Common;

namespace TC57CIM.IEC61970.Meas {
	/// <summary>
	/// Analog represents an analog Measurement.
	/// </summary>
	public class Analog : Measurement {

        /// <summary>
        /// Normal value range maximum for any of the MeasurementValue.values. Used for
        /// scaling, e.g. in bar graphs or of telemetered raw values.
        /// </summary>
        private float maxValue;
        /// <summary>
        /// Normal value range minimum for any of the MeasurementValue.values. Used for
        /// scaling, e.g. in bar graphs or of telemetered raw values.
        /// </summary>
        private float minValue;
        /// <summary>
        /// Normal measurement value, e.g., used for percentage calculations.
        /// </summary>
        private float normalValue;

        public Analog()
        {

        }

        public Analog(long globalId)
            :base(globalId)            
        {
		}
        public float MaxValue
        {
            get{return maxValue;}

            set{maxValue = value; }
        }

        public float MinValue
        {
            get{return minValue;}

            set{minValue = value;}
        }

        public float NormalValue
        {
            get{return normalValue;}

            set{normalValue = value;}
        }
        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                Analog x = (Analog)obj;
                return (x.maxValue == this.maxValue && x.minValue == this.minValue && x.normalValue == this.normalValue);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.ANALOG_MAXVALUE:
                case ModelCode.ANALOG_MINVALUE:
                case ModelCode.ANALOG_NORMALVALUE:
                    return true;

                default:
                    return base.HasProperty(t);

            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ANALOG_MAXVALUE:
                    property.SetValue(maxValue);
                    break;
                case ModelCode.ANALOG_MINVALUE:
                    property.SetValue(minValue);
                    break;
                case ModelCode.ANALOG_NORMALVALUE:
                    property.SetValue(normalValue);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ANALOG_MAXVALUE:
                    
                    maxValue = property.AsFloat();
                    break;
                case ModelCode.ANALOG_MINVALUE:
                    minValue = property.AsFloat();
                    break;
                case ModelCode.ANALOG_NORMALVALUE:
                    normalValue = property.AsFloat();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation


    }//end Analog

}//end namespace Meas