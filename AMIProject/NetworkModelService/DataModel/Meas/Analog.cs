///////////////////////////////////////////////////////////
//  Analog.cs
//  Implementation of the Class Analog
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:00 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Meas;
using FTN.Common;
using System.Runtime.Serialization;

namespace TC57CIM.IEC61970.Meas
{
    /// <summary>
    /// Analog represents an analog Measurement.
    /// </summary>
    [DataContract]
    [Serializable]
    public class Analog : Measurement
    {

        /// <summary>
        /// Normal value range maximum for any of the MeasurementValue.values. Used for
        /// scaling, e.g. in bar graphs or of telemetered raw values.
        /// </summary>
        private float maxValue;
        /// <summary>
        /// Normal value range minimum for any of the MeasurementValue.values. Used for
        /// scaling, e.g. in bar graphs or of telemetered raw values.
        /// </summary>
        private float minValue;
        /// <summary>
        /// Normal measurement value, e.g., used for percentage calculations.
        /// </summary>
        private float normalValue;

        private int validRange;
        private int invalidRange;

        public Analog()
        {

        }

        public Analog(long globalId)
            : base(globalId)
        {
        }

        [DataMember]
        public float MaxValue
        {
            get { return maxValue; }

            set { maxValue = value; }
        }

        [DataMember]
        public float MinValue
        {
            get { return minValue; }

            set { minValue = value; }
        }

        [DataMember]
        public float NormalValue
        {
            get { return normalValue; }

            set { normalValue = value; }
        }

        [DataMember]
        public int ValidRange
        {
            get
            {
                return validRange;
            }

            set
            {
                validRange = value;
            }
        }

        [DataMember]
        public int InvalidRange
        {
            get
            {
                return invalidRange;
            }

            set
            {
                invalidRange = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                Analog x = (Analog)obj;
                return (x.maxValue == this.maxValue && x.minValue == this.minValue && x.normalValue == this.normalValue &&
                        x.validRange == this.validRange && x.invalidRange == this.invalidRange);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.ANALOG_MAXVALUE:
                case ModelCode.ANALOG_MINVALUE:
                case ModelCode.ANALOG_NORMALVALUE:
                case ModelCode.ANALOG_VALIDRANGE:
                case ModelCode.ANALOG_INVALIDRANGE:
                    return true;

                default:
                    return base.HasProperty(t);

            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ANALOG_MAXVALUE:
                    property.SetValue(maxValue);
                    break;
                case ModelCode.ANALOG_MINVALUE:
                    property.SetValue(minValue);
                    break;
                case ModelCode.ANALOG_NORMALVALUE:
                    property.SetValue(normalValue);
                    break;
                case ModelCode.ANALOG_VALIDRANGE:
                    property.SetValue(validRange);
                    break;
                case ModelCode.ANALOG_INVALIDRANGE:
                    property.SetValue(invalidRange);
                    break;
                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.ANALOG_MAXVALUE:

                    maxValue = property.AsFloat();
                    break;
                case ModelCode.ANALOG_MINVALUE:
                    minValue = property.AsFloat();
                    break;
                case ModelCode.ANALOG_NORMALVALUE:
                    normalValue = property.AsFloat();
                    break;
                case ModelCode.ANALOG_VALIDRANGE:
                    validRange = property.AsInt();
                    break;
                case ModelCode.ANALOG_INVALIDRANGE:
                    invalidRange = property.AsInt();
                    break;
                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

        public void RD2Class(ResourceDescription rd)
        {
            foreach (Property p in rd.Properties)
            {
                SetProperty(p);
            }
        }

        public Analog DeepCopy()
        {
            Analog analogCopy = new Analog();

            analogCopy.GlobalId = this.GlobalId;
            analogCopy.Mrid = this.Mrid;
            analogCopy.Name = this.Name;
            analogCopy.MinValue = this.MinValue;
            analogCopy.MaxValue = this.MaxValue;
            analogCopy.NormalValue = this.NormalValue;
            analogCopy.UnitSymbol = this.UnitSymbol;
            analogCopy.SignalDirection = this.SignalDirection;
            analogCopy.PowerSystemResourceRef = this.PowerSystemResourceRef;
            analogCopy.validRange = this.validRange;
            analogCopy.invalidRange = this.invalidRange;

            return analogCopy;
        }


    }//end Analog

}//end namespace Meas