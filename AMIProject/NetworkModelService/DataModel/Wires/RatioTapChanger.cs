///////////////////////////////////////////////////////////
//  RatioTapChanger.cs
//  Implementation of the Class RatioTapChanger
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:08 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Wires;
using FTN.Common;
using TC57CIM.IEC61970.Core;

namespace TC57CIM.IEC61970.Wires {
	/// <summary>
	/// A tap changer that changes the voltage ratio impacting the voltage magnitude
	/// but not the phase angle across the transformer.
	/// </summary>
	public class RatioTapChanger : TapChanger {

        private long transformerEnd = 0;

        public RatioTapChanger()
        {

        }

        public RatioTapChanger(long globalId) : base(globalId)
        {
		}

        public long TransformerEnd
        {
            get
            {
                return transformerEnd;
            }

            set
            {
                transformerEnd = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                RatioTapChanger x = (RatioTapChanger)obj;
                return (x.transformerEnd == this.transformerEnd);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.RATIOTAPCHANGER_TRANSEND:
                    return true;

                default:
                    return base.HasProperty(t);

            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.RATIOTAPCHANGER_TRANSEND:
                    property.SetValue(transformerEnd);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {

                case ModelCode.RATIOTAPCHANGER_TRANSEND:
                    transformerEnd = property.AsReference();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

        #region IReference implementation

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (transformerEnd != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
            {
                references[ModelCode.RATIOTAPCHANGER_TRANSEND] = new List<long>();
                references[ModelCode.RATIOTAPCHANGER_TRANSEND].Add(transformerEnd);
            }

            base.GetReferences(references, refType);
        }

        #endregion IReference implementation	

        public RatioTapChanger DeepCopy()
        {
            RatioTapChanger tapChangerCopy = new RatioTapChanger();

            tapChangerCopy.GlobalId = this.GlobalId;
            tapChangerCopy.Mrid = this.Mrid;
            tapChangerCopy.Name = this.Name;
            tapChangerCopy.HighStep = this.HighStep;
            tapChangerCopy.LowStep = this.LowStep;
            tapChangerCopy.NeutralStep = this.NeutralStep;
            tapChangerCopy.NormalStep = this.NormalStep;
            tapChangerCopy.Measurements = this.Measurements;
            tapChangerCopy.TransformerEnd = this.TransformerEnd;

            return tapChangerCopy;
        }

    }//end RatioTapChanger

}//end namespace Wires