///////////////////////////////////////////////////////////
//  TapChanger.cs
//  Implementation of the Class TapChanger
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:02 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Core;
using TC57CIM.IEC61970.Wires;
using FTN.Common;

namespace TC57CIM.IEC61970.Wires {
	/// <summary>
	/// Mechanism for changing transformer winding tap positions.
	/// </summary>
	public class TapChanger : PowerSystemResource {
        
		private int highStep;
        private int lowStep;
        private int neutralStep;
        private int normalStep;

		public TapChanger(long globalId) : base(globalId)
        {
		}

        public int HighStep
        {
            get
            {
                return highStep;
            }

            set
            {
                highStep = value;
            }
        }

        public int LowStep
        {
            get
            {
                return lowStep;
            }

            set
            {
                lowStep = value;
            }
        }

        public int NeutralStep
        {
            get
            {
                return neutralStep;
            }

            set
            {
                neutralStep = value;
            }
        }

        public int NormalStep
        {
            get
            {
                return normalStep;
            }

            set
            {
                normalStep = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                TapChanger x = (TapChanger)obj;
                return (x.highStep == this.highStep && x.lowStep == this.lowStep && 
                        x.neutralStep == this.neutralStep && x.normalStep == this.normalStep);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.TAPCHANGER_HIGHSTEP:
                case ModelCode.TAPCHANGER_LOWSTEP:
                case ModelCode.TAPCHANGER_NEUTRALSTEP:
                case ModelCode.TAPCHANGER_NORMALSTEP:
                    return true;

                default:
                    return base.HasProperty(t);
            }
        }

        public override void GetProperty(Property prop)
        {
            switch (prop.Id)
            {
                case ModelCode.TAPCHANGER_HIGHSTEP:
                    prop.SetValue(highStep);
                    break;
                case ModelCode.TAPCHANGER_LOWSTEP:
                    prop.SetValue(lowStep);
                    break;
                case ModelCode.TAPCHANGER_NEUTRALSTEP:
                    prop.SetValue(neutralStep);
                    break;
                case ModelCode.TAPCHANGER_NORMALSTEP:
                    prop.SetValue(normalStep);
                    break;

                default:
                    base.GetProperty(prop);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.TAPCHANGER_HIGHSTEP:
                    highStep = property.AsInt();
                    break;
                case ModelCode.TAPCHANGER_LOWSTEP:
                    lowStep = property.AsInt();
                    break;
                case ModelCode.TAPCHANGER_NEUTRALSTEP:
                    neutralStep = property.AsInt();
                    break;
                case ModelCode.TAPCHANGER_NORMALSTEP:
                    normalStep = property.AsInt();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

    }//end TapChanger

}//end namespace Wires