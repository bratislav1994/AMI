///////////////////////////////////////////////////////////
//  TransformerEnd.cs
//  Implementation of the Class TransformerEnd
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:05 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using TC57CIM.IEC61970.Wires;
using TC57CIM.IEC61970.Core;
using FTN.Common;

namespace TC57CIM.IEC61970.Wires {
	/// <summary>
	/// A conducting connection point of a power transformer. It corresponds to a
	/// physical transformer winding terminal.  In earlier CIM versions, the
	/// TransformerWinding class served a similar purpose, but this class is more
	/// flexible because it associates to terminal but is not a specialization of
	/// ConductingEquipment.
	/// </summary>
	public class TransformerEnd : IdentifiedObject {

        private long baseVoltage = 0;
        private List<long> ratioTapChanger = new List<long>();

        public TransformerEnd(long globalId) : base(globalId)
        {
		}

        public long BaseVoltage
        {
            get
            {
                return baseVoltage;
            }

            set
            {
                baseVoltage = value;
            }
        }

        public List<long> RatioTapChanger
        {
            get
            {
                return ratioTapChanger;
            }

            set
            {
                ratioTapChanger = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                TransformerEnd x = (TransformerEnd)obj;
                return (x.baseVoltage == this.baseVoltage && 
                       (CompareHelper.CompareLists(x.ratioTapChanger, this.ratioTapChanger)));
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.TRANSFORMEREND_BASEVOLT:
                case ModelCode.TRANSFORMEREND_RATIOTAPCHANGER:
                    return true;

                default:
                    return base.HasProperty(t);

            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.TRANSFORMEREND_BASEVOLT:
                    property.SetValue(baseVoltage);
                    break;
                case ModelCode.TRANSFORMEREND_RATIOTAPCHANGER:
                    property.SetValue(ratioTapChanger);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.TRANSFORMEREND_BASEVOLT:
                    baseVoltage = property.AsReference();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

        #region IReference implementation

        public override bool IsReferenced
        {
            get
            {
                return ratioTapChanger.Count > 0 || base.IsReferenced;
            }
        }

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (baseVoltage != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
            {
                references[ModelCode.TRANSFORMEREND_BASEVOLT] = new List<long>();
                references[ModelCode.TRANSFORMEREND_BASEVOLT].Add(baseVoltage);
            }

            if (ratioTapChanger != null && ratioTapChanger.Count > 0 &&
                (refType == TypeOfReference.Target || refType == TypeOfReference.Both))
            {
                references[ModelCode.TRANSFORMEREND_RATIOTAPCHANGER] = ratioTapChanger.GetRange(0, ratioTapChanger.Count);
            }

            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.RATIOTAPCHANGER_TRANSEND:
                    ratioTapChanger.Add(globalId);
                    break;

                default:
                    base.AddReference(referenceId, globalId);
                    break;
            }
        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.RATIOTAPCHANGER_TRANSEND:

                    if (ratioTapChanger.Contains(globalId))
                    {
                        ratioTapChanger.Remove(globalId);
                    }
                    else
                    {
                        CommonTrace.WriteTrace(CommonTrace.TraceWarning, "Entity (GID = 0x{0:x16}) doesn't contain reference 0x{1:x16}.", this.GlobalId, globalId);
                    }

                    break;
                
                default:
                    base.RemoveReference(referenceId, globalId);
                    break;
            }
        }

        #endregion IReference implementation	

    }//end TransformerEnd

}//end namespace Wires