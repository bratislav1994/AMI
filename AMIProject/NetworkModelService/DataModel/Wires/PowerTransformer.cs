///////////////////////////////////////////////////////////
//  PowerTransformer.cs
//  Implementation of the Class PowerTransformer
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:03 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Core;
using TC57CIM.IEC61970.Wires;
using FTN.Common;
using System.Runtime.Serialization;

namespace TC57CIM.IEC61970.Wires {
	/// <summary>
	/// An electrical device consisting of  two or more coupled windings, with or
	/// without a magnetic core, for introducing mutual coupling between electric
	/// circuits. Transformers can be used to control voltage and phase shift (active
	/// power flow).
	/// A power transformer may be composed of separate transformer tanks that need not
	/// be identical.
	/// A power transformer can be modelled with or without tanks and is intended for
	/// use in both balanced and unbalanced representations.   A power transformer
	/// typically has two terminals, but may have one (grounding), three or more
	/// terminals.
	/// </summary>
	public class PowerTransformer : ConductingEquipment {

        private float validRangePercent;
        private float invalidRangePercent;

        public PowerTransformer()
        {

        }

        public PowerTransformer(long globalId) : base(globalId)
        {
        }

        [DataMember]
        public float ValidRangePercent
        {
            get
            {
                return validRangePercent;
            }

            set
            {
                validRangePercent = value;
            }
        }

        [DataMember]
        public float InvalidRangePercent
        {
            get
            {
                return invalidRangePercent;
            }

            set
            {
                invalidRangePercent = value;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                PowerTransformer x = (PowerTransformer)obj;
                return x.validRangePercent == this.validRangePercent && x.invalidRangePercent == this.invalidRangePercent;
            }
            else
            {
                return false;
            }
        }
        
        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.POWERTRANSFORMER_VALIDRANGEPERCENT:
                case ModelCode.POWERTRANSFORMER_INVALIDRANGEPERCENT:
                    return true;

                default:
                    return base.HasProperty(t);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.POWERTRANSFORMER_VALIDRANGEPERCENT:
                    property.SetValue(validRangePercent);
                    break;
                case ModelCode.POWERTRANSFORMER_INVALIDRANGEPERCENT:
                    property.SetValue(invalidRangePercent);
                    break;

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.POWERTRANSFORMER_VALIDRANGEPERCENT:
                    validRangePercent = property.AsFloat();
                    break;
                case ModelCode.POWERTRANSFORMER_INVALIDRANGEPERCENT:
                    invalidRangePercent = property.AsFloat();
                    break;
                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation

        public void RD2Class(ResourceDescription rd)
        {
            foreach (Property p in rd.Properties)
            {
                if (p.Id == ModelCode.PSR_MEASUREMENTS)
                {
                    foreach (long l in p.PropertyValue.LongValues)
                    {
                        this.AddReference(ModelCode.MEASUREMENT_PSR, l);
                    }
                }
                else
                {
                    SetProperty(p);
                }
            }
        }

        public PowerTransformer DeepCopy()
        {
            PowerTransformer powerTransCopy = new PowerTransformer();

            powerTransCopy.GlobalId = this.GlobalId;
            powerTransCopy.Mrid = this.Mrid;
            powerTransCopy.Name = this.Name;
            powerTransCopy.BaseVoltage = this.BaseVoltage;
            powerTransCopy.EqContainer = this.EqContainer;
            powerTransCopy.Measurements = this.Measurements;
            powerTransCopy.ValidRangePercent = this.ValidRangePercent;
            powerTransCopy.InvalidRangePercent = this.InvalidRangePercent;

            return powerTransCopy;
        }

    }//end PowerTransformer

}//end namespace Wires