///////////////////////////////////////////////////////////
//  BaseVoltage.cs
//  Implementation of the Class BaseVoltage
//  Generated by Enterprise Architect
//  Created on:      20-Nov-2017 7:17:11 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using FTN.Common;
using System.Runtime.Serialization;

namespace TC57CIM.IEC61970.Core {
    /// <summary>
    /// Defines a system base voltage which is referenced.
    /// </summary>
    [DataContract]
    public class BaseVoltage : IdentifiedObject {

        private float nominalVoltage;
        private List<long> conductingEquipments = new List<long>();

        public BaseVoltage()
        {

        }

        public BaseVoltage(long globalId) : base(globalId)
        {
        }

        [DataMember]
        public float NominalVoltage
        {
            get
            {
                return nominalVoltage;
            }

            set
            {
                nominalVoltage = value;
            }
        }
        
        public List<long> ConductingEquipments
        {
            get
            {
                return conductingEquipments;
            }

            set
            {
                conductingEquipments = value;
            }
        }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                BaseVoltage x = (BaseVoltage)obj;
                return ((x.NominalVoltage == this.NominalVoltage) &&
                        (CompareHelper.CompareLists(x.conductingEquipments, this.conductingEquipments)));
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #region IAccess implementation

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.BASEVOLTAGE_NOMINALVOL:
                case ModelCode.BASEVOLTAGE_CONDEQS:
                    return true;

                default:
                    return base.HasProperty(t);
            }
        }

        public override void GetProperty(Property prop)
        {
            switch (prop.Id)
            {
                case ModelCode.BASEVOLTAGE_NOMINALVOL:
                    prop.SetValue(nominalVoltage);
                    break;
                case ModelCode.BASEVOLTAGE_CONDEQS:
                    prop.SetValue(conductingEquipments);
                    break;

                default:
                    base.GetProperty(prop);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.BASEVOLTAGE_NOMINALVOL:
                    nominalVoltage = property.AsFloat();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        #endregion IAccess implementation	

        #region IReference implementation

        public override bool IsReferenced
        {
            get
            {
                return conductingEquipments.Count > 0 || base.IsReferenced;
            }
        }

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (conductingEquipments != null && conductingEquipments.Count > 0 && 
                (refType == TypeOfReference.Target || refType == TypeOfReference.Both))
            {
                references[ModelCode.BASEVOLTAGE_CONDEQS] = conductingEquipments.GetRange(0, conductingEquipments.Count);
            }
            
            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.CONDEQ_BASEVOLTAGE:
                    conductingEquipments.Add(globalId);
                    break;

                default:
                    base.AddReference(referenceId, globalId);
                    break;
            }
        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.CONDEQ_BASEVOLTAGE:

                    if (conductingEquipments.Contains(globalId))
                    {
                        conductingEquipments.Remove(globalId);
                    }
                    else
                    {
                        CommonTrace.WriteTrace(CommonTrace.TraceWarning, "Entity (GID = 0x{0:x16}) doesn't contain reference 0x{1:x16}.", this.GlobalId, globalId);
                    }

                    break;
                
                default:
                    base.RemoveReference(referenceId, globalId);
                    break;
            }
        }

        #endregion IReference implementation	

        public void RD2Class(ResourceDescription rd)
        {
            foreach (Property p in rd.Properties)
            {
                if (p.Id == ModelCode.BASEVOLTAGE_CONDEQS)
                {
                    foreach (long l in p.PropertyValue.LongValues)
                    {
                        this.AddReference(ModelCode.CONDEQ_BASEVOLTAGE, l);
                    }
                }
                else
                {
                    SetProperty(p);
                }
            }
        }

        public BaseVoltage DeepCopy()
        {
            BaseVoltage baseVoltageCopy = new BaseVoltage();

            baseVoltageCopy.GlobalId = this.GlobalId;
            baseVoltageCopy.Mrid = this.Mrid;
            baseVoltageCopy.Name = this.Name;
            baseVoltageCopy.NominalVoltage = this.NominalVoltage;
            baseVoltageCopy.ConductingEquipments = this.ConductingEquipments;

            return baseVoltageCopy;
        }

    }//end BaseVoltage

}//end namespace Core